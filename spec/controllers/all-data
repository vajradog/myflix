class PasswordResetsController < ApplicationController

  def show
    user = User.where(token: params[:id]).first
    if user
      @token = user.token 
    else 
      redirect_to expired_token_path 
    end
  end

  def expired_token
  end

  def create
    user = User.where(token: params[:token]).first
    if user 
      user.password = params[:password]
      user.save
      flash[:notice] = "Password was reset"
      redirect_to sign_in_path
      #user.destroy_token
    else
      redirect_to expired_token_path
    end
  end
end
--
class ForgotPasswordsController < ApplicationController

  def create
    user = User.where(email: params[:email]).first
    if user
      @token = user.generate_token
      user.save
      AppMailer.send_forgot_password(user).deliver
      redirect_to forgot_password_confirmation_path
    else
      flash[:error] = params[:email].blank? ? "Email cannot be blank" : "Email does not exist in our system" 
      redirect_to forgot_password_path
    end
  end

  def confirm
  end



end




require 'rails_helper'

describe ForgotPasswordsController do
  describe "POST create" do
    context "with blank input" do
      it "redirects to the forgot password page" do
        post :create, { email: "" }
        expect(response).to redirect_to forgot_password_path
      end

      it "shows an error" do 
        post :create, { email: "" }
        expect(flash[:error]).to eq("Email cannot be blank")
      end
    end

    context "with existing email" do
      it "redirects to forgot password confirmation page" do
        Fabricate(:user, email: "john@example.com")
        post :create, { email: "john@example.com" }
        expect(response).to redirect_to forgot_password_confirmation_path
      end

      it "generates token" do
        Fabricate(:user, email: "john@example.com")
        post :create, { email: "john@example.com" }
        expect(assigns(:token)).to be_present
      end

      it "sends email to the email address" do 
        Fabricate(:user, email: "john@example.com")
        post :create, { email: "john@example.com" }
        expect(ActionMailer::Base.deliveries.last.to).to eq(["john@example.com"])
      end
    end

    context "with non-existing email" do
      it "redirects to the forgot password page" do
        post :create, { email: "hello@example.com" }
        expect(response).to redirect_to forgot_password_path
      end

      it "shows an error" do 
        post :create, { email: "hello@example.com" }
        expect(flash[:error]).to eq("Email does not exist in our system")
      end
    end
  end
end

--

require 'rails_helper'

describe PasswordResetsController do
  describe "GET show" do
    it "renders show template if token is valid" do
      alice = Fabricate(:user)
      alice.update_column(:token, '123')
      alice.save
      get :show, id:'123'
      expect(response).to render_template :show
    end

    it "sets @token" do
      alice = Fabricate(:user)
      alice.update_column(:token, '123')
      alice.save
      get :show, id:'123'
      expect(assigns(:token)).to eq('123')
    end

    it "redirects to expired token page if token is invalid" do
      get :show, id: 'wrongtoken123'
      expect(response).to redirect_to expired_token_path
    end
  end

  describe "POST create" do
    context "with valid token" do
      it "redirects to the sign in page" do
        alice = Fabricate(:user, password: 'old_password')
        alice.update_column(:token, '123')
        post :create, token:'123', password: 'new_password'
        expect(response).to redirect_to sign_in_path
      end

      it "sets the flash success message" do
        alice = Fabricate(:user, password: 'old_password')
        alice.update_column(:token, '123')
        post :create, token:'123', password: 'new_password'
        expect(flash[:notice]).to_not be_empty
      end

      it "updates the users password" do
        alice = Fabricate(:user, password: 'old_password')
        alice.update_column(:token, '123')
        post :create, token: '123', password: 'new_password'
        expect(alice.reload.authenticate('new_password')).to eq(alice)
        #expect(alice.reload.authenticate('new_password')).to be_true
      end

      it "after password is updates, the token is deleted" do
        alice = Fabricate(:user)
        expect(alice.reload.token).to be_nil
      end
    end

    context "with invalid token" do
      it "redirects to the expired token path" do
        post :create, token: '123', password: 'new_password'
        expect(response).to redirect_to expired_token_path
      end
    end
  end
end